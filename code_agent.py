# code_agent.py

import os
import uuid
import logging
from typing import Dict, Any
from fastapi import FastAPI, Request, HTTPException
import httpx
from pydantic import BaseModel
from supabase import create_client, Client


SUPABASE_URL = os.getenv("SUPABASE_URL")  # üëà –¥–æ–±–∞–≤—å
SUPABASE_KEY = os.getenv("SUPABASE_API_KEY")  # üëà –¥–æ–±–∞–≤—å
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)  # üëà –¥–æ–±–∞–≤—å


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
AGENT_TYPE = "code"
BOT_CONTACT = "@Freelance_mvp_bot"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Telegram
ALLOWED_KEYWORDS = ["–±–æ—Ç", "—Å–∫—Ä–∏–ø—Ç", "—Å–∞–π—Ç", "–ø–∞—Ä—Å–∏–Ω–≥", "scraper", "api", "telegram", "chrome", "python"]

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("code_agent")

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥—É–±–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
processed_ids = set()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ===
app = FastAPI()

# === –ú–æ–¥–µ–ª—å –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ ===
class Order(BaseModel):
    id: str
    title: str
    link: str = ""
    description: str
    contact: str = ""


# === –•–µ–ª–ø–µ—Ä: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ===
def is_relevant_task(text: str) -> bool:
    text = text.lower()
    return any(keyword in text for keyword in ALLOWED_KEYWORDS)


# === –•–µ–ª–ø–µ—Ä: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter ===
async def generate_response_via_openrouter(description: str) -> str:
    try:
        system_prompt = "–¢—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä. –ü–∏—à–∏ –≤–µ–∂–ª–∏–≤–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É, —É–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç."
        user_prompt = f"–ï—Å—Ç—å –∑–∞–¥–∞—á–∞: {description}. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∫–ª–∏–∫ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞."

        payload = {
            "model": "openchat/openchat-7b",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
        }

        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }

        async with httpx.AsyncClient() as client:
            response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers, timeout=30)

        if response.status_code == 200:
            reply = response.json()
            return reply["choices"][0]["message"]["content"]
        else:
            logger.warning(f"OpenRouter error {response.status_code}: {response.text}")
            return f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –∑–∞–¥–∞–Ω–∏–µ–º. –ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ú–æ–π Telegram: {BOT_CONTACT}"

    except Exception as e:
        logger.error(f"LLM error: {e}")
        return f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –∑–∞–¥–∞–Ω–∏–µ–º. –ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ú–æ–π Telegram: {BOT_CONTACT}"


# === –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–∞ ===
@app.post("/handle_order")
async def handle_order(order: Order) -> Dict[str, Any]:
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑: {order.id} ‚Äî {order.title}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Supabase –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫–ª–∏–∫–∞
    try:
        existing = supabase.table("orders").select("response").eq("id", order.id).execute()
        if existing.data and existing.data[0].get("response"):
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–∫–∞–∑ (—É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç) –≤ Supabase: {order.id}")
            return {"status": "duplicate", "response": ""}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª—è –≤ Supabase: {e}")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if not is_relevant_task(order.title + " " + order.description):
        logger.info(f"–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {order.title}")
        return {"status": "irrelevant", "response": ""}

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞
    reply = await generate_response_via_openrouter(order.description)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ Supabase
    try:
        supabase.table("orders").update({
            "response": reply,
            "status": "replied"
        }).eq("id", order.id).execute()
        logger.info(f"–û—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Supabase –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –≤ Supabase: {e}")

    processed_ids.add(order.id)

    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–∫–ª–∏–∫ –¥–ª—è {order.id}")
    return {
        "status": "ok",
        "agent": AGENT_TYPE,
        "response": reply
    }


# === –ü–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
@app.get("/ping")
async def ping():
    return {"status": "alive", "agent": AGENT_TYPE}
